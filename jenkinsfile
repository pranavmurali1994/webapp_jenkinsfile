pipeline {
    agent { label 'master' }

    environment {
        REGISTRY     = "172.16.0.5:5000"
        IMAGE_NAME   = "goapp"
        CHART_PATH   = "./charts"
        CHART_NAME   = "web"
        KUBE_CONTEXT = "kubernetes-admin@kubernetes"
        IMAGE_TAG    = "latest"
    }

    stages {
        stage('Prepare Workspace') {
            steps {
                script {
                    deleteDir()
                }
            }
        }
        stage('Checkout') {
            steps {
                sshagent(['github-ssh']) {
                    git branch: 'main', url: 'git@github.com:pranavmurali1994/webapp.git'
                }
            }
        }

        stage('Build Docker Image') {
            when { expression { !params.HELM_ONLY } }
            steps {
                dir('Docker') { 
                    sh """
                    docker build -t $REGISTRY/$IMAGE_NAME:$IMAGE_TAG .
                    """
                }
            }
        }

        stage('Trivy Scan') {
            when { expression { !params.HELM_ONLY } }
            steps {
                script {
                    sh "trivy image $REGISTRY/$IMAGE_NAME:$IMAGE_TAG | tee trivy_scan_report.txt"
        
                    sh "zip trivy_scan_report.zip trivy_scan_report.txt"
        
                }
                archiveArtifacts artifacts: 'trivy_scan_report.zip', fingerprint: true
            }
        }

        stage('Image Push to Private Registry') {
            when { expression { !params.HELM_ONLY } }
            steps {
                dir('Docker') {
                        sh """
                        docker push $REGISTRY/$IMAGE_NAME:$IMAGE_TAG
                        """
                }
            }
        }

        stage('Set App Version') {
            steps {
                script {
                    COMMIT_ID = sh(returnStdout: true, script: "git log -1 --pretty=format:'%h-%cn' | tr ' ' '-'").trim()
                    sh "sed -i 's|REPLACE_COMMIT_ID|${COMMIT_ID}|' charts/Chart.yaml"
                    echo "Updated Chart.yaml appVersion to ${COMMIT_ID}"
                }
            }
        }

        stage('Helm Deploy') {
          steps {
            withKubeConfig([credentialsId: 'kubeconfig']) {
              sh """
                helm upgrade -i $CHART_NAME $CHART_PATH \
                  -n demo \
                  --create-namespace \
                  --set image.repository=$REGISTRY/$IMAGE_NAME \
                  --set image.tag=$IMAGE_TAG \
                  --set appMessage="${params.APP_MESSAGE}"
              """
            }
          }
        }
    }
}
